# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'D:\python\OpenEncoder.ui'
#
# Created by: PyQt5 UI code generator 5.15.5
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets, Qt
import os, winreg, sys, ctypes  #, subprocess
from threading import Timer

def quitApp():
        sys.exit()
def weNotAdmin():
        app = QtWidgets.QApplication(sys.argv)
        widget = QtWidgets.QWidget()
        widget.setStyleSheet("background-color: rgb(50, 50, 50);")
        widget.setWindowFlags( QtCore.Qt.WindowCloseButtonHint )

        textLabel = QtWidgets.QLabel(widget)
        textLabel.setText("<p style=font-family:consolas;>PLEASE RUN AS ADMINISTRATOR")
        textLabel.setGeometry(QtCore.QRect(10, 10, 190, 23))
        textLabel.setStyleSheet("color: rgb(255, 255, 255);\n"
        "font: 10pt \"Consolas\";")

        CloseButton = QtWidgets.QPushButton(widget)
        CloseButton.setText('CLOSE')
        CloseButton.setGeometry(QtCore.QRect(10, 40, 190, 23))
        CloseButton.setStyleSheet("background-color: rgb(50, 0, 0);color: rgb(255, 255, 255);font: bold 8pt \"Consolas\";\n"
        "\n"
        "")
        CloseButton.setObjectName("CloseButton")
        CloseButton.clicked.connect(quitApp)

        widget.setWindowTitle("ERROR : NOT ADMIN")
        widget.show()
        sys.exit(app.exec_())

def is_admin():
        try:
                return ctypes.windll.shell32.IsUserAnAdmin()
        except:
                False

def getFFmpeg():
        ## call date command ##

        # ffmpegpath = os.path.join(os.getcwd(),'bin','ffmpeg.exe')
        # full_command = '"'+ ffmpegpath + '"' + ' -version'
        # p = subprocess.check_output(full_command)
        # version = p.splitlines()[0]
        # version = version.decode("utf-8")

        # version = version.replace('ffmpeg ', '')
        # version= version.replace("version ", '')
        # version = version.split('Copyright')[0]
        
        # print(version)

        return 'MassieVFX - Version 1.0Alpha'

class Ui_Dialog(object):
        def setupUi(self, Dialog):

                self.ProfilePath = os.path.join(os.getcwd(),'profiles')
                self.ROOTKEY = r'*\\shell\\MassieVFXOpenEncoder'
                self.activeDir = self.ROOTKEY
                
                
                Dialog.setObjectName("Dialog")
                Dialog.setFixedSize(311, 360)
                Dialog.setStyleSheet("background-color: rgb(50, 50, 50);")
                Dialog.setWindowFlags( QtCore.Qt.WindowCloseButtonHint )


                self.label = QtWidgets.QLabel(Dialog)
                self.label.setGeometry(QtCore.QRect(10, 10, 101, 20))
                self.label.setStyleSheet("color: rgb(255, 255, 255);\n"
                "font: 8pt \"Consolas\";")
                self.label.setObjectName("label")
                self.ProfileButton = QtWidgets.QPushButton(Dialog)
                self.ProfileButton.setGeometry(QtCore.QRect(220, 10, 81, 20))
                font = QtGui.QFont()
                font.setFamily("Consolas")
                font.setPointSize(7)
                font.setBold(False)
                font.setItalic(False)
                font.setWeight(50)
                self.ProfileButton.setFont(font)
                self.ProfileButton.setStyleSheet("background-color: rgb(50, 50, 50);\n"
                "color: rgb(255, 255, 255);\n"
                "font: 7pt \"Consolas\";")
                self.ProfileButton.setObjectName("ProfileButton")
                self.ProfileButton.clicked.connect(self.setProfilePath)
                self.CloseButton = QtWidgets.QPushButton(Dialog)
                self.CloseButton.setGeometry(QtCore.QRect(10, 330, 141, 23))
                self.CloseButton.setStyleSheet("background-color: rgb(50, 0, 0);color: rgb(255, 255, 255);font: bold 8pt \"Consolas\";\n"
                "\n"
                "")
                self.CloseButton.setObjectName("CloseButton")
                self.CloseButton.clicked.connect(quitApp)
                self.FFmpegVLabel = QtWidgets.QLabel(Dialog)
                self.FFmpegVLabel.setGeometry(QtCore.QRect(10, 300, 291, 21))
                self.FFmpegVLabel.setStyleSheet("\n"
                "font: italic 7.5pt \"Consolas\";\n"
                "color: rgb(100, 100, 100);")
                self.FFmpegVLabel.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
                self.FFmpegVLabel.setObjectName("FFmpegVLabel")
                self.OkButton = QtWidgets.QPushButton(Dialog)
                self.OkButton.setGeometry(QtCore.QRect(160, 330, 141, 23))
                self.OkButton.setStyleSheet("background-color: rgb(0, 50, 0);color: rgb(255, 255, 255);font: bold 8pt \"Consolas\";\n"
                "")
                self.OkButton.setObjectName("OkButton")
                self.OkButton.clicked.connect(self.OkClicked)
                self.Tree = QtWidgets.QTreeWidget(Dialog)
                self.Tree.setGeometry(QtCore.QRect(10, 40, 291, 261))
                self.Tree.setStyleSheet("font: 8pt \"Consolas\";\n"
                "color: rgb(255, 255, 255);")
                self.Tree.setFrameShape(QtWidgets.QFrame.Box)
                self.Tree.setFrameShadow(QtWidgets.QFrame.Sunken)
                self.Tree.setObjectName("Tree")
                self.Tree.header().setVisible(False)


                self.parentElement = self.Tree


                self.getFiles()
                self.retranslateUi(Dialog)
                QtCore.QMetaObject.connectSlotsByName(Dialog)

        def subGrabItems(self, item):
                if item[0] != '.disable':
                        if os.path.isdir(item[1]):
                                
                                # CREATE FOLDER IN TREE VEW
                                widget = QtWidgets.QTreeWidgetItem([item[0]])
                                widget.setCheckState(0,QtCore.Qt.Checked)
                                widget.FolderState = True
                                widget.path = item[1]

                                self.Tree.addTopLevelItem(widget)     
                                

                                for i in os.listdir(widget.path):  
                                        self.parentElement = widget
                                        self.subGrabItems([i,widget.path + '\\' + i])
                        else:
                                
                                # CREATE A CODEC OPTION AND ADDS IT TO THE LIST

                                widget = QtWidgets.QTreeWidgetItem([item[0].rsplit('.',1)[0]])
                                widget.setCheckState(0,QtCore.Qt.Checked)
                                widget.FolderState = False

                                ### SETTING THE MAIN COMMAND

                                execPath = os.path.dirname(sys.argv[0])
                                widget.executeCommand = 'cmd /K "cd /d '+execPath+' && "'+item[1]+'" "%1""'
                                if self.parentElement == self.Tree:
                                        self.Tree.addTopLevelItem(widget)     
                                else:
                                        self.parentElement.addChild(widget)

        def getFiles(self):
                for element in os.listdir(self.ProfilePath):
                        path = os.path.join(self.ProfilePath,element)
                        self.parentElement = self.Tree
                        item = [element, path]
                        self.subGrabItems(item)
                

                self.Tree.expandAll()


        def setProfilePath(self):
                self.Tree.clear()
                self.ProfilePath = QtWidgets.QFileDialog.getExistingDirectory(None, "Select Directory", self.ProfilePath)
                self.getFiles()

        def retranslateUi(self, Dialog):
                _translate = QtCore.QCoreApplication.translate
                Dialog.setWindowTitle(_translate("Dialog", "MassieVFX OpenEncoder"))
                self.label.setText(_translate("Dialog", "PROFILES :"))
                self.ProfileButton.setText(_translate("Dialog", "OPEN PROFILES"))
                self.CloseButton.setText(_translate("Dialog", "CLOSE"))
                self.CloseButton.setShortcut(_translate("Dialog", "Esc"))
                self.FFmpegVLabel.setText(_translate("Dialog", getFFmpeg()))
                self.OkButton.setText(_translate("Dialog", "APPLY"))
                self.OkButton.setShortcut(_translate("Dialog", "Esc"))
                self.Tree.headerItem().setText(0, _translate("Dialog", "profiles"))


        def delete_sub_key(self, root, sub):
    
                try:
                        open_key = winreg.OpenKey(root, sub, 0, winreg.KEY_ALL_ACCESS)
                        num, _, _ = winreg.QueryInfoKey(open_key)

                        for i in range(num):
                                child = winreg.EnumKey(open_key, 0)
                                self.delete_sub_key(open_key, child)
                        try:
                                winreg.DeleteKey(open_key, '')
                        except Exception:
                                print(Exception)# log deletion failure
                        finally:
                                winreg.CloseKey(open_key)
                except Exception:
                        print(Exception)

        def ScanTreeDir(self, item):

                
                if item.checkState(0) == 2:
                        if item.FolderState:
                                self.activeDir = self.activeDir + r'\\' + item.text(0)
                                ROOTKEY = winreg.CreateKey(winreg.HKEY_CLASSES_ROOT, self.activeDir)
                                winreg.SetValueEx(ROOTKEY, 'MUIVerb', 0, winreg.REG_SZ, item.text(0))
                                winreg.SetValueEx(ROOTKEY, 'subcommands', 0, winreg.REG_SZ, '')
                                winreg.CreateKey(winreg.HKEY_CLASSES_ROOT, self.activeDir+ r'\\shell')
                                for i in range(item.childCount()):
                                        self.ScanTreeDir(item.child(i))
                        else:
                                if self.activeDir == self.ROOTKEY + r'\\shell':
                                        print (self.ROOTKEY)
                                        winreg.CreateKey(winreg.HKEY_CLASSES_ROOT, self.ROOTKEY + r'\\shell\\'+item.text(0))
                                        winreg.SetValue(winreg.HKEY_CLASSES_ROOT, self.ROOTKEY + r'\\shell\\'+item.text(0)+ r'\\command', winreg.REG_SZ, item.executeCommand)
                                else:
                                        winreg.CreateKey(winreg.HKEY_CLASSES_ROOT, self.activeDir + r'\\shell\\'+item.text(0))
                                        winreg.SetValue(winreg.HKEY_CLASSES_ROOT, self.activeDir + r'\\shell\\'+item.text(0)+ r'\\command', winreg.REG_SZ, item.executeCommand)
                    

        def setname(self):
                self.OkButton.setText('APPLY')
                

        def showOkAnim(self):
                self.OkButton.setText('APPLYED !!!')
                Timer(3, self.setname).start()
                





        def OkClicked(self):

                self.activeDir = self.ROOTKEY
                self.delete_sub_key(winreg.HKEY_CLASSES_ROOT, self.ROOTKEY)

                ROOTKEY = winreg.CreateKey(winreg.HKEY_CLASSES_ROOT, self.ROOTKEY)

                winreg.SetValueEx(ROOTKEY, 'MUIVerb', 0, winreg.REG_SZ, 'MassieVFX - Open Encoder')
                winreg.SetValueEx(ROOTKEY, 'subcommands', 0, winreg.REG_SZ, '')

                winreg.CreateKey(winreg.HKEY_CLASSES_ROOT, self.activeDir + r'\\shell')

                for item in range(self.Tree.topLevelItemCount()):
                        self.activeDir = self.ROOTKEY+r'\\shell'
                        self.parentElement = self.Tree
                        self.ScanTreeDir(self.Tree.topLevelItem(item))

                self.showOkAnim()

                



if __name__ == "__main__":
        if is_admin():
                app = QtWidgets.QApplication(sys.argv)
                Dialog = QtWidgets.QDialog()
                ui = Ui_Dialog()
                ui.setupUi(Dialog)
                Dialog.show()
                sys.exit(app.exec_())
        else:
                weNotAdmin()
